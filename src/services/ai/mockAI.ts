/**
 * Mock AI Service
 * 
 * Provides predictable responses for testing without API calls
 */

import { AIService } from './aiServiceFactory';

export class MockAIService implements AIService {
  /**
   * Generate a mock text response
   */
  async generateText(prompt: string): Promise<string> {
    console.log('MockAIService.generateText called with:', prompt);
    
    // Return some mock responses based on the prompt
    if (prompt.toLowerCase().includes('hello')) {
      return "Hello! I'm a mock AI assistant. How can I help you today?";
    }
    
    if (prompt.toLowerCase().includes('weather')) {
      return "I don't have access to real-time weather data, but I can help you with other tasks!";
    }
    
    if (prompt.toLowerCase().includes('help')) {
      return "I can help with various tasks like answering questions, scheduling, and analyzing documents. What would you like assistance with?";
    }
    
    // Default response
    return `This is a mock response to: "${prompt}". In production, this would be generated by Google's Gemini AI.`;
  }
  
  /**
   * Generate a mock chat response
   */
  async generateChatResponse(messages: any[]): Promise<string> {
    console.log('MockAIService.generateChatResponse called with:', messages);
    
    // Get the last message content
    const lastMessage = messages[messages.length - 1];
    const content = typeof lastMessage === 'string' ? lastMessage : lastMessage.content || '';
    
    return this.generateText(content);
  }
  
  /**
   * Create a mock embedding
   */
  async createEmbedding(text: string): Promise<number[]> {
    console.log('MockAIService.createEmbedding called for text:', text);
    
    // Generate a deterministic mock embedding based on the input text
    const mockEmbedding = new Array(128).fill(0).map((_, i) => {
      // Use a simple hash of the text + position to get a consistent value
      const hashCode = (text.charCodeAt(Math.min(i, text.length - 1)) + i) / 255;
      return Math.sin(hashCode) * 0.5 + 0.5; // Value between 0 and 1
    });
    
    return mockEmbedding;
  }
} 